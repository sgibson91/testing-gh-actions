name: Experiment with PR comments

on:
  pull_request:
  pull_request_target:

jobs:
  create-output:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    outputs:
      comment-body: ${{ steps.comment-body.outputs.comment-body }}
    steps:
      - run: |
          pip install py-markdown-table rich==12.4.4

      - name: Create an output to post as a comment
        id: comment-body
        shell: python
        run: |
          from rich.console import Console
          from rich.table import Table
          from markdownTable import markdownTable

          data = [{"A": 1, "B": 2}, {"A": True, "B": False}]

          console = Console(record=True)
          table = Table(title="Test Table")

          for column in data[0].keys():
              table.add_column(str(column))

          for item in data:
              table.add_row(*[str(value) for value in item.values()])

          console.print(table)

          md_table = markdownTable(data).setParams(row_sep="markdown", quote=False).getMarkdown()
          md_table = md_table.replace("\n", "%0A")

          print(f"::set-output name=comment-body::{md_table}")

  create-update-comment:
    if: github.event_name == 'pull_request_target'
    runs-on: ubuntu-latest
    steps:
      - name: Identify job status
        id: find-job-status
        shell: bash
        run: |
          STATUS=""
          CONCLUSION=""

          while [ "$STATUS" != "completed" ]; do
            RESPONSE=$(curl --silent --request GET \
              --url 'https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs' \
              --header 'Authorization: token ${{ secrets.jupyterhub_bot_pat }}' \
              --header 'Accept: application/vnd.github.v3+json')

            STATUS=$(echo $RESPONSE | jq -r '.jobs[] | select(.name | startswith("create-output")) | .status')
            echo "Status: $STATUS"

            if [[ "$STATUS" == "completed" ]]; then
              CONCLUSION=$(echo $RESPONSE | jq -r '.jobs[] | select(.name | startswith("create-output")) | .conclusion')
              echo "Conclusion: $CONCLUSION"
              echo "Response: $RESPONSE"
            else
              sleep 30s
            fi
          done

          echo "::set-output name=status::$STATUS"
          echo "::set-output name=conclusion::$CONCLUSION"

      # - name: Ascertain if comment exists or not
      #   id: comment-exists
      #   shell: python
      #   run: |
      #     from ghapi.all import GhApi, paged

      #     api = GhApi(token=r"""${{ secrets.GITHUB_TOKEN }}""")
      #     owner, repo = r"""${{ github.repository }}""".split("/")
      #     issue_number = r"""${{ github.event.number }}"""

      #     issue_comments = paged(
      #         api.issues.list_comments,
      #         owner=owner,
      #         repo=repo,
      #         issue_number=issue_number,
      #         per_page=100,
      #     )

      #     comment = next(
      #         (
      #             comment[0]
      #             for comment in issue_comments
      #             if comment[0].user.login == "github-actions[bot]"
      #         ),
      #         False,
      #     )

      #     if comment:
      #         print("::set-output name=comment-exists::true")
      #         print(f"::set-output name=comment-id::{comment.id}")
      #     else:
      #         print("::set-output name=comment-exists::false")
      #         print("::set-output name=comment-id::null")

      # - name: Post a comment
      #   if: steps.comment-exists.outputs.comment-exists == 'false'
      #   uses: actions/github-script@v6.1.0
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       var COMMENT_BODY = process.env.COMMENT_BODY;

      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: `${COMMENT_BODY}`
      #       })
      #   env:
      #     COMMENT_BODY: ${{ steps.comment-body.outputs.comment-body }}

      # - name: Update a comment
      #   if: steps.comment-exists.outputs.comment-exists == 'true'
      #   uses: actions/github-script@v6.1.0
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       var COMMENT_BODY = process.env.COMMENT_BODY;
      #       var COMMENT_ID = process.env.COMMENT_ID;

      #       github.rest.issues.updateComment({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         comment_id: `${COMMENT_ID}`,
      #         body: `${COMMENT_BODY}`
      #       })
      #   env:
      #     COMMENT_BODY: ${{ steps.comment-body.outputs.comment-body }}
      #     COMMENT_ID: ${{ steps.comment-exists.outputs.comment-id }}
