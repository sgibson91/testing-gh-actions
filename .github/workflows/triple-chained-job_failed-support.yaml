name: triple chained job with failed support

on:
  workflow_dispatch:

jobs:
  set-matrices:
    runs-on: ubuntu-latest
    outputs:
      support-matrix: ${{ steps.set-matrices.outputs.support-matrix }}
      staging-matrix: ${{ steps.set-matrices.outputs.staging-matrix }}
      prod-matrix: ${{ steps.set-matrices.outputs.prod-matrix }}

    steps:
      - id: set-matrices
        shell: python
        run: |
          import os
          import json

          colours = ["red", "blue", "yellow"]
          output_file = os.environ["GITHUB_OUTPUT"]

          support_matrix = []
          staging_matrix = []
          prod_matrix = []

          for colour in colours:
              support_matrix.append({"cluster_name": colour})
              staging_matrix.append({"cluster_name": colour, "hub_name": "staging"})
              prod_matrix.append({"cluster_name": colour, "hub_name": "prod"})

          with open(output_file, "a") as f:
              f.write(f"support-matrix={json.dumps(support_matrix)}\n")
              f.write(f"staging-matrix={json.dumps(staging_matrix)}\n")
              f.write(f"prod-matrix={json.dumps(prod_matrix)}\n")

  upgrade-support:
    runs-on: ubuntu-latest
    needs: [set-matrices]
    outputs:
      failure_blue: ${{ steps.declare-failure.outputs.failure_blue }}
      failure_red: ${{ steps.declare-failure.outputs.failure_red }}
      failure_yellow: ${{ steps.declare-failure.outputs.failure_yellow }}
    strategy:
      fail-fast: false
      matrix:
        jobs: ${{ fromJson(needs.set-matrices.outputs.support-matrix) }}
    steps:
      - shell: python
        run: |
          import os

          cluster_name = os.environ["CLUSTER_NAME"]

          if cluster_name == "blue":
              assert False
          else:
              assert True
        env:
          CLUSTER_NAME: ${{ matrix.jobs.cluster_name }}

      - id: declare-failure
        if: always()
        shell: python
        run: |
          import os

          name = "${{ matrix.jobs.cluster_name }}"
          failure_status = "${{ job.status == 'failure' }}"

          output_file = os.environ["GITHUB_OUTPUT"]
          with open(output_file, "a") as f:
              f.write(f"failure_{name}={failure_status}\n")

  filter-failed-support:
    runs-on: ubuntu-latest
    needs: [set-matrices, upgrade-support]
    if: |
      !cancelled() &&
      needs.set-matrices.result == 'success'
    outputs:
      staging-matrix: ${{ steps.matrix-filter.outputs.staging-matrix }}
      prod-matrix: ${{ steps.matrix-filter.outputs.prod-matrix }}
    steps:
      - id: matrix-filter
        shell: python
        run: |
          import os
          import json

          output_file = os.environ["GITHUB_OUTPUT"]

          staging_matrix = json.loads(r"""${{ needs.set-matrices.outputs.staging-matrix }}""")
          prod_matrix = json.loads(r"""${{ needs.set-matrices.outputs.prod-matrix }}""")
          outputs = json.loads(r"""${{ toJson(needs.upgrade-support.outputs) }}""")

          try:
              staging_jobs = [
                  staging_job
                  for staging_job in staging_jobs
                  if outputs[f"failure_{staging_job['cluster_name']}"] != "true"
              ]

              prod_jobs = [
                  prod_job
                  for prod_job in prod_jobs
                  if outputs[f"failure_{prod_job['cluster_name']}"] != "true"
              ]
          except KeyError:
              print(f"The {cluster_name} cluster wasn't found in the `upgrade-support.outputs` list. Please add it before continuing!")

          with open(output_file, "a") as f:
              f.write(f"staging-matrix={staging_jobs}\n")
              f.write(f"prod-matrix={prod_jobs}\n")

  upgrade-staging:
    runs-on: ubuntu-latest
    needs: [filter-failed-support]
    strategy:
      fail-fast: false
      matrix:
        jobs: ${{ fromJson(needs.filter-failed-support.outputs.staging-matrix) }}
    if: |
      needs.filter-failed-support.result == 'success'
    steps:
      - run: echo "${{ matrix.jobs.cluster_name }} ${{ matrix.jobs.hub_name }}"

  upgrade-prod:
    runs-on: ubuntu-latest
    needs: [filter-failed-support, upgrade-staging]
    strategy:
      fail-fast: false
      matrix:
        jobs: ${{ fromJson(needs.filter-failed-support.outputs.prod-matrix) }}
    if: |
      needs.filter-failed-support.result == 'success' &&
      needs.upgrade-staging.result == 'success'
    steps:
      - run: echo "${{ matrix.jobs.cluster_name }} ${{ matrix.jobs.hub_name }}"
